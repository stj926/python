同步异步
阻塞非阻塞

老张爱喝茶，废话不说，煮开水。
出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。
1 老张把水壶放到火上，立等水开。（同步阻塞）
老张觉得自己有点傻
2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）
老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。
水开之后，能大声发出嘀~~~~的噪音。
3 老张把响水壶放到火上，立等水开。（异步阻塞）
老张觉得这样傻等意义不大
4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）
老张觉得自己聪明了。

所谓同步异步，只是对于水壶而言。普通水壶，同步；响水壶，异步。
虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。
这是普通水壶所不能及的。
同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。

所谓阻塞非阻塞，仅仅对于老张而言。立等的老张，阻塞；看电视的老张，非阻塞。
情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。
虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。
所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。
——来源网络，作者不明。

###############################################################################
#多线程，多进程
import multiprocessing
import threading

def multi_pools_parse(file_task_date):
    input_txts = [x for x in glob.glob(file_task_date+'\\*\\*.alog') if os.path.getsize(x)>0]
    input_txts = sorted(input_txts,key=os.path.getsize,reverse=True)
    pool = multiprocessing.Pool(cpu_count)
    pool.map(run, input_txts)
    pool.close()
    
    
def multi_threads_zip(task_date):
    threads = []
    for city in cities:
        t = threading.Thread(target=zip_city_csv,args=(city,task_date))
        threads.append(t)
        t.start()
    for t in threads:
        t.join()
      
###############################################################################
from multiprocessing import Process,Pool
from multiprocessing import Manager
import time

def Foo(i):
    time.sleep(1)
    return i+50
 
def Bar(arg):
    print(arg)
 
if __name__ =='__main__':
    pool = Pool(5)
    for i in range(10):
        '''apply是去简单的去执行，而apply_async是执行完毕之后可以执行一个回调函数，起提示作用'''
        pool.apply_async(func=Foo,args=(i,),callback=Bar)#是异步的
        print('你好')
    pool.close()#不执行close会报错，因为join的源码里面有个断言会检验是否执行了该方法
    pool.join()#等待所有子进程运行完毕，否则的话由于apply_async里面daemon是设置为True的，主进程不会等子进程，所欲函数可能会来不及执行完毕就结束了
        '''apply_async里面，等函数Foo执行完毕，它的返回结果会被当做参数传给Bar'''
        
        
 
###############################################################################
Process类的构造方法：
__init__(self, group=None, target=None, name=None, args=(), kwargs={})
参数说明： 
group：进程所属组。基本不用 
target：表示调用对象。 
args：表示调用对象的位置参数元组。 
name：别名 
kwargs：表示调用对象的字典。

注意： 
在Windows上要想使用进程模块，就必须把有关进程的代码写在当前.py文件的if __name__ == ‘__main__’ :语句的下面，才能正常使用Windows下的进程模块。Unix/Linux下则不需要。



Pool类

 Pool类可以提供指定数量的进程供用户调用，当有新的请求提交到Pool中时，如果池还没有满，就会创建一个新的进程来执行请求。如果池满，请求就会告知先等待，直到池中有进程结束，才会创建新的进程来执行这些请求。 
下面介绍一下multiprocessing 模块下的Pool类下的几个方法：

1.apply()

函数原型：apply(func[, args=()[, kwds={}]])

该函数用于传递不定参数，同python中的apply函数一致，主进程会被阻塞直到函数执行结束（不建议使用，并且3.x以后不在出现）。

2.apply_async

函数原型：apply_async(func[, args=()[, kwds={}[, callback=None]]])

与apply用法一致，但它是非阻塞的且支持结果返回后进行回调。

3.map()

 函数原型：map(func, iterable[, chunksize=None])

Pool类中的map方法，与内置的map函数用法行为基本一致，它会使进程阻塞直到结果返回。 
注意：虽然第二个参数是一个迭代器，但在实际使用中，必须在整个队列都就绪后，程序才会运行子进程。

4.map_async()

函数原型：map_async(func, iterable[, chunksize[, callback]])
与map用法一致，但是它是非阻塞的。其有关事项见apply_async。

5.close()

关闭进程池（pool），使其不在接受新的任务。

6.terminal()

结束工作进程，不在处理未处理的任务。

7.join()

主进程阻塞等待子进程的退出， join方法要在close或terminate之后使用。
